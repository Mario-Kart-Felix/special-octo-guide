import base64/86
import os
import socket
import threading
import tkinter
import urllib.request
from tkinter import *
from tkinter import ttk

import requests
from bs4 import BeautifulSoup
from PIL import Image, ImageTk

top=tkinter.Tk()
top.title("Pyridine")

global emp
global online
global offline
global refresh

top.initsize="top.geometry('430x700')"
top.finasize="top.geometry('830x700')"
top.size = top.initsize

s='''- structure, chemical names, physical and chemical properties, classification, patents, literature, biological activities, safety/hazards/toxicity information, supplier lists, and more.'''
ans="y"
snip1=["Search and explore chemical information in the world's largest freely accessible chemistry database."]

emp='''R0lGODlhLAEsAXAAACwAAAAALAEsAYH19fUAAAAAAAAAAAACfoSPqcvtD6OctNqLs968+w+G4kiW5omm6sq27gvH8kzX9o3n+s73/g8MCofEovGITCqXzKbzCY1Kp9Sq9YrNarfcrvcLDovH5LL5jE6r1+y2+w2Py+f0uv2Oz+v3/L7/DxgoOEhYaHiImKi4yNjo+AgZKTlJWWl5iZmpucnZ6UD5CRoqOkpaanqKmqq6ytrq+gobKztLW2t7i5uru8vb6/sLHCw8TFxsfIycrLzM3Oz8DB0tPU1dbX2Nna29zd3tM/0NHi4+Tl5ufo6err7O3u7+Dh8vP09fb3+Pn6+/z9/v/w8woMCBBAsaPIgwocKFDBs6fC8IMaLEiRQrWryIMaPGjRw7evwIMqTIkSRLmjyJMqXKlSxbunwJM6bMmTRr2ryJMymnzp08e/r8CTSo0KFEixo9ijSp0qVMmzp9CjWq1KlUq1q9ijWr1q1cuyV6/Qo2rNixZMuaPYs2rdq1bNu6fQs3rty5dOvavYs3r969fPv6I/0LOLDgwYQLGz6MOLHixYwbO34MObLkyZQrW76MObPmzZw7E3v+DDq06NGkS5s+jTq16tVICwAAOw=='''
sym='''R0lGODlhPgBHAHAAACH5BAEAAIsALAAAAAA+AEcAhwAAAH9/fyQkJCcnJxUVFWJiYv///3l5eREREQICAgEBATQ0NERERBgYGAsLCwcHBwkJCQUFBWxsbGZmZlNTUwwMDAMDA0VFRXNzcy8vLzo6OkhISAgICDMzM1VVVSsrK0xMTImJiRAQEAQEBBMTE3V1dVtbWx0dHTIyMmNjYyoqKh8fH1BQUBoaGhcXFzg4OE9PTyUlJVFRUUdHRxYWFjs7OwoKCklJSZmZmSgoKG1tbT4+Pj09PUFBQVRUVGFhYRISElZWVhsbG1hYWEpKSg4ODlxcXHFxcQ8PDzExMUZGRjU1NV1dXU5OTjY2NgYGBl5eXl9fXyEhIVJSUjk5OSwsLA0NDRwcHCYmJhQUFDc3N0NDQzAwMEtLSyIiIh4eHmBgYHh4eI2NjSkpKU1NTS4uLldXV2pqamlpaYuLiy0tLWhoaCsrJCMrO1VVqhMPDz8/PwABAhcXKRkZGQAABAIBAhYaHgEAAAQAAEVcXBcHBw8SHAYBAAAAAT8/Tzw8PBwODgYDACwbFgEBAgUAADIkHQIAACAgIBEUFyQdGSUrNgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAj/ABcJHEiwoMGDCBMqXMiwocOHECNKnEixosWLGDNq3Mixo8ePHxGA3AigZMmRFhGUVGkSAMqILV0KbPmyYcyDLGXWPGhSpEKaOwcCZeil586hD3P6DGmUYk6PLZdaRHqxKUmTVVeCVDrx6cucOhl6DTr2Z0kvMGNatYnVbFq1MaUuLBqWZ12FZQtSdcuXYduFLB2e7GtW7sLBh+/qVVxQpWG/jAkiRjiZcmSFdBNrJpx2c8LKix8/BC358iLSQk1D5mwQ9UzREF27nnlZNdvPpmXbXm3Zc+vdvhcHL51R9/DUxSPPPq0cOGvkz2knx30c+tTm1aVfj27dblbu2qlTmNQqvjxCx+Nzq+fdOXt48HZhd/fOVn5p++/ps1UPAH/+37HdRNte8P0lGFwEnmcgTgmatSBkDyoYYUcCBjhhcsslRt5VG17XYUVRcQSWXWGBVmFHI5aG2GQnbmWSHqmtqFODHznQloCD0TgSVicBQId2GR7lEo/OCSldkEEBqWOS1i3JJHMxFlkTi0gmaRgC/j2p5ZZcdhQQADs='''
logo=''''''
online='''R0lGODlhHAAcAHAAACH5BAEAALgALAAAAAAcABwAhwAAAFWqVVGiaC65WB3FSxzDSxzGSxzFTBvGTDiuWVmZZgD/AFSpZynHVQ7QRA3PRA7QRQ7RRQ/PRDTHXlmZcmaZZiO/URLPRw3RRA/PRQ3PRQ7PRA3QRRDPRke3Z1+ffx3MTRHQRxHMRxbIRzysWn9/f06TazG2VhHNRg/QRDjOYx7MTg/QRhDORhbJSUulWiTEUTO/XDe2WC26UziyWxDQRUSuY1WUahLMRQ7PRRjHSVV/fzSzViy4VSu7Uym8Uiu8VEOpYCm/UhHMRW2RbS22URLLR1SbcRe9Rx/BTFyLcwD//w7ORA7RRDSvVw/ORTWxWFujbRzCShXLSTmsWhDMRhDNRybHUibCUw/ORGKcdVqUah3DTRPOSH+ffxjJSFKcalmZbDKvV2mWeGiWcy+0VQ3QRFObaVuXbWuTeGSRbT6nXVOcZlybajGwVm+Pb2WYcFuabSLBTRHORmKJdSzCVVegZVSNcSHFUBrGSxfMShTLSEOlYR3CTBLMR0+fbz+lWRLORj+tYg/QRRTJRxy9Sl2haxHPSDC6VA/NRS67V0aiYzK1VzG2VzG3VjW2WTywWxjKSRDORTy0YRDPRTi2WRLNRg/PRji3WyfBUhDQRii+UnWJdVChaxnJSR3KT////yTEUi+/WU+fZ0WpXBvASBLNRx7OTz62YBLQRw3ORCbCT2ObcT3EYCvKV0+nYGqUakGrYCa+USPATyLAUCO/TiO/Tyu8UgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjYAHEJHEiwoMGDCBMqXCgQCYghIBgmxKBqiMWLFiUOHKJKFQaOHSuqapKR4RCKQxBy/LiQZMqFHjEkbMJS4skmBy8eRGTh4MeXBDkCFYixJEGKBXUSHEkTw8+hTSoulTqQaZOmP4NyXAp1yNWvTTseVRWU7EanYLGaJboWF1WBTjGkvYp0YF22U+fSHSq2aluveqO29Rj0rlu0af8aFdi3qtyvKAsPdfuW8UmRSQkX7Dh5odPOuJSa3IrQpUnNCb0u1lp55ueQnEfW1NgxLmzQGi3o7qmxt8KAADs='''
offline='''R0lGODlhHAAcAHAAACH5BAEAAMEALAAAAAAcABwAhwAAAKpVVa1RUcw5QdwpMNsoL90nL90nLt0oL75ARKVZWf8AALNeXtw1OescJOobJOocJOwcJOscI+scJdxARJlmZtQuNekgKOwcI+kcJOocI+sbI+oeJsdPU59ff+QnL+ofJucfJuIlKrtDS59fX39/f5xYWMY7QuceJ+sdJeRDS+QqMOkeJeMjKrRLS9cvOOobI9I8QsdCQuoeJ+oeJc01PMFCR+geJeodJcBKUJRVauUeJuMkK8o5P802O881O9E0Os42O7VJT9U0OOcdJZFtbcg2O+QgJ6ljY9UlK9gqMItzc8E9QekdJcM7QaNbbdgoMOYhKb1BSuUeJ9sxN9gxOukeJuodJJxiYtwoMOcgKJ9/f+EkKqRaWp9fZsA+QpZpaZZoaMk6P6ZYXqNhYZNra+wbI5pkbbpKSqZYXaJjY8E5QY9vb5hlZcFCRppkZNYtNekgJ+keJ5x1ddg0PKdXXo1xcesdJN0rMusbJN4oMOUjK+geJKlUY+QhKaxLS9kpL+YhJ69fX7JGTOgfJ79LS+EhKNMnLukdI65dXekfJ+kbI8o4PNA5P7FNVMk7Qck6QMY9Q8JCSOMkLuceJqJcXMNLS8ZARMk5QOcgJ+seJcZCR9cyOeocJdIyN4l1deAmLekdJuofJ+EpMf///9oxN9U8P6dXV6lUcapqarlNTdUnLekcJeodJuUrM8pITOkhKegcJOkcI+kgJtgxNdhESeE3Pq9PV5RqarhKT9MwN9ctNNcuNNQuNNcuNc82Oq5QXQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjMAIMJHEiwoMGDCBMqXCjQgAFDBhgmNEORoiYzF81IHKgpY8WPFiV27Igwo6aFsEgurJjw4kmRZgwdzHjQk6eDIQsuilnQI0WDPwkaCjpwZ0WPBFkOpLgoKcanHwlqWvRSINFgPi1GXaqRq1OXIK+K7Wo1LFiywTA6dfo0K1qVZaWGhVo1bd2cVsF6bDowZd20aAF/nFrXZU+eSanu5MuV8cChgVeqNThyI16gVxFi/EtZKeWOkQ8aWgxyJOKNi4wOlrnRoKdDr1vLThgQADs='''
refresh='''R0lGODlhHAAcAHAAACH5BAEAADsALAAAAAAcABwAhQAAAG1tbSMjIxERERAQEBUVFQwMDBMTE0RERH9/f2NjY1xcXC8vLwEBAQICAg4ODj4+PkpKSgYGBgcHB3V1dWZmZg8PDwMDAx4eHgoKCnd3dyAgIDs7OwQEBAkJCS0tLVRUVFVVVQsLC19fX0VFRTc3N09PTxYWFiQkJF1dXQUFBXFxcQgICGpqajo6Oj8/P1BQUDMzMzk5OU5OTjQ0NCgoKCkpKSsrKxwcHEFBQUNDQwAAAAAAAAAAAAAAAAAAAAZmwJ1wSCwaj8ikcslsOp/EwQAwhRIB2Kx2MMQutWDtbgpQhgGCczYJPp6RW3bbvUaSxfQy/G28m8NHflZ9WAKDhF6HUXWKXYmNQniQcXZ6X5JXjH9gaYBNanNOd2Fcg1Onj5Cqq5BBADs='''
top.rgtarrow='''R0lGODlhFAAbAHAAACH5BAEAACEALAAAAAAUABsAhQAAAGdnZ2tra39/f////2FhYVpaWldXV15eXnFxcVhYWF1dXV9fX3Nzc4qKimBgYHl5eYuLi5CQkJSUlFxcXG5ubltbW2ZmZm1tbVlZWXh4eGlpaXR0dHZ2dnBwcFVVVWNjYwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGwJBwSCwaj8ikUvn5XJbFphQ6vEidVKFT+sxar9nQd+ptfsNjbJmL3jbD1y41nY3XwVR7Hg81q/t8S1cfd2R3cmhhiotFQQA7'''
top.lftarrow='''R0lGODlhFAAbAHAAACH5BAEAACEALAAAAAAUABsAhQAAAKqqqnBwcGhoaJGRkX9/f1lZWVhYWGJiYm9vb1dXV1paWltbW3p6enR0dG5ubnJycmxsbIKCgnV1dV9fX3t7e4iIiFxcXF5eXoeHh3Nzc11dXYODg3d3d3h4eGNjY2ZmZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZBwJBwSCwaj8ikcolUKJhFpxMqlE6h1ifWSs12uVvpVxy+Mr1jclkBooZAaChc2qbO1ec4827Og+V/YXVucG6GUEEAOw=='''

imagePath2 = PhotoImage(data=online)
widgetf2 = Label(top,  image=imagePath2,bg="#ffd2ab")
widgetf2.place(x=0,y=0)


def is_connected():
    global online
    global offline
    try:
        socket.create_connection(("www.google.com", 80)) 
        state = "Online"
        stat  = online

    except OSError:
        state = "Offline"
        stat  = offline

    imagePath2 = PhotoImage(data=stat)
    widgetf2 = Label(top,  image=imagePath2,bg="#ffd2ab")
    widgetf2.image=imagePath2
    widgetf2.place(x=0,y=0)
    top.update_idletasks()
    top.after(1000, is_connected)
    
tt3 =threading.Event()
t3=threading.Thread(target=is_connected)
t3.start()

imagePath = PhotoImage(data=emp)
widgetf = Label(top,  image=imagePath,bd=3,  bg="#3399ff")
widgetf.place(x=60,y=80)

imagePath1 = PhotoImage(data=logo)
widgetf1 = Label(top,  image=imagePath1,bg="#ffd2ab")
widgetf1.place(x=145,y=5)


def newdir():
    top.desktop = os.getcwd()          
    os.chdir(top.desktop)                                   
    top.dirname=(top.desktop+r"\StructureImage cache")
    if not os.path.exists(top.dirname):                     
        os.makedirs(top.dirname,exist_ok=True)              
        os.chdir(top.dirname)                               


def molecularweight(CID):
    mwlink="https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/cid/"+CID+"/property/MolecularWeight/txt"
    mwdata=requests.get(mwlink)
    mw= BeautifulSoup(mwdata.text, "html.parser")
    mw=str(mw).lstrip().rstrip()
    compweight2.config(text=mw)

def molecularname(CID):
    mnlink="https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/cid/"+CID+"/property/IUPACName/txt"
    mndata=requests.get(mnlink)
    mn= BeautifulSoup(mndata.text, "html.parser")
    mn=str(mn).lstrip().rstrip()
    mn=mn.capitalize()
    compname2.config(text=mn)

def molecularformula(CID):
    mflink="https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/cid/"+CID+"/property/MolecularFormula/txt"
    mfdata=requests.get(mflink)
    mf= BeautifulSoup(mfdata.text, "html.parser")
    mf=str(mf).lstrip().rstrip()
    compformula2.config(text=mf)

def molecularstructure(CID,comp):
    mslink="https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/cid/"+CID+"/PNG?record_type=2d"
    path=top.dirname+"\\"+comp+".gif"
    urllib.request.urlretrieve(mslink,path)
    select(comp)
    
def select(comp):
    pth=top.dirname+"\\"+comp+".gif"
    img = Image.open(pth)
    tkimage = ImageTk.PhotoImage(img)
    structure = Label(top,image = tkimage,bd=3,bg="#3399ff")
    structure.image=tkimage
    structure.place(x=60,y=80)
    top.update_idletasks()


def getinfo(event):
    newdir()
    compound=txt.get()

    basepage = "https://pubchem.ncbi.nlm.nih.gov/compound/"+compound
    pagehtmldata = requests.get(basepage)
    soup = BeautifulSoup(pagehtmldata.text, "html.parser")
    name_formula = soup.find("meta", {"name": "description"})["content"]
    name_formula = name_formula.replace(s,"")
    name_formula = name_formula.split('|')
    try:
        x=name_formula[2].lstrip().rstrip().split(" ")
    except:
        pass

    molecularname(x[1])
    molecularweight(x[1])
    molecularformula(x[1])
    molecularstructure(x[1],compound)


def reset():
    global emp
    compformula2.config(text="")
    compname2.config(text="")
    compweight2.config(text="")
    txt.delete(0,"end")
    
    imagePath = PhotoImage(data=emp)
    widgetf = Label(top,  image=imagePath,bd=3)
    widgetf.place(x=60,y=80)
    top.update_idletasks()    


def expand():
    if top.size==top.initsize:
        top.geometry('830x700')
        top.size=top.finasize
        lftpic=PhotoImage(data=top.lftarrow)
        exp.config(image=top.lftpic)
        exp.place(x=400,y=0)    
    elif top.size==top.finasize:
        top.geometry('430x700')
        top.size=top.initsize
        rgtpic=PhotoImage(data=top.rgtarrow)
        exp.config(image=top.rgtpic)
        exp.place(x=400,y=0)         


refpic=PhotoImage(data=refresh)
top.rgtpic=PhotoImage(data=top.rgtarrow)
top.lftpic=PhotoImage(data=top.lftarrow)

ref=Button(top,image=refpic,bg="#ffd2ab",bd=0,command=reset)
ref.place(x=0,y=35)

exp=Button(top,image=top.rgtpic,bg="#ffd2ab",bd=0,command=expand)
exp.place(x=400,y=0)

txt=Entry(top,bd=5,font=("Arial Rounded MT",17),width=23)
txt.place(x=60,y=400)


compformula1 = Label(top,font=("cooper",17),text="Molecular Formula",bg="#ffd2ab",fg="#cc0066")
compformula1.place(x=115,y=450)

compformula2 = Label(top,font=("cooper",16),text=" ",width=25,bd=5)
compformula2.place(x=60,y=480)


compname1 = Label(top,font=("cooper",17),text="Molecular Name",bg="#ffd2ab",fg="#cc0066")
compname1.place(x=115,y=530)

compname2 = Label(top,font=("cooper",16),text=" ",width=25,bd=5)
compname2.place(x=60,y=560)


compweight1 = Label(top,font=("cooper",17),text="Molecular Weight",bg="#ffd2ab",fg="#cc0066")
compweight1.place(x=115,y=610)

compweight2 = Label(top,font=("cooper",16),text=" ",width=25,bd=5)
compweight2.place(x=60,y=640)

top.bind('<Return>', getinfo)


top.configure(background="#ffd2ab")
top.geometry('430x700')
top.update()
top.mainloop()
